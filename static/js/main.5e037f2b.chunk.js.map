{"version":3,"sources":["components/Sticky.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Sticky","props","react_default","a","createElement","style","position","zIndex","top","children","Card","changeCard","e","console","log","Object","assertThisInitialized","_this","onClick","this","className","src","concat","id","width","height","alt","name","email","Component","CardList","_ref","cardsArray","robots","map","user","components_Card","key","SearchBox","searchfield","searchChange","type","borderColor","placeholder","onChange","ErrorBoundary","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","setState","React","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Sticky","components_SearchBox","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","logger","createLogger","robotReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5e037f2b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Sticky = (props) => {\n    return (\n        <div style={{ position: 'sticky', zIndex: 1, top: '0' }}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Sticky;","import React, {Component} from 'react';\n\nclass Card extends Component {\n\n    changeCard = (e) => {\n        console.log(this);\n    }\n\n    render() {\n        return (\n            <div onClick={this.changeCard} className='flex flex-column items-center tc bg-light-green b--green dib br3 pa3 ma3 bw2 grow shadow-5 w-80 w-50-ns w-25-l'>\n                <img src={`https://robohash.org/${this.props.id}?200x200`} width='200' height='200' alt={`robot named ${this.props.name}`} />\n                <div className='robotInfo'>\n                    <h2 className='mt3'>{this.props.name}</h2>\n                    <p className='mt2'>{this.props.email}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    const cardsArray = robots.map(user => {\n        return (\n            <Card\n             key={user.id} \n             id={user.id}\n             name={user.name}\n             email={user.email}\n            />\n        );\n    });\n\n    return (\n        <div className='flex flex-column flex-wrap justify-center items-center flex-row-ns'>\n            {cardsArray}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='mb2'>\n            <input\n             className='w-80 w-50-ns w-25-l pa3 b ba bw2 bg-navy lightest-blue roboto' \n             type='search'\n             style={{ borderColor: '#13ffa8' }}\n              placeholder='Search for your perfect robot...' \n              onChange={searchChange}\n            />        \n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }  \n    \n    // if any errors, display error message:\n    componentDidCatch() {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h2>Oops, something went wrong...</h2>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport './App.css';\nimport Sticky from '../components/Sticky';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport {setSearchField, requestRobots} from '../actions';\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    componentDidMount() {\n       this.props.onRequestRobots();\n    }\n\n   render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n        return robot.name\n                .toLowerCase()\n                .includes(searchField.toLowerCase());\n    });\n\n    return isPending ?\n        <h1 className='tc ma5'>Loading...</h1>\n        : (\n            <div className='tc'>\n                <h1 className='f1'>RoboLove</h1>\n                <Sticky>\n                    <SearchBox searchChange={onSearchChange} />\n                </Sticky>   \n                <ErrorBoundary>\n                    <CardList className='flex justify-center' robots={filteredRobots} />                \n                </ErrorBoundary>                 \n            </div>\n        )\n    }\n}\n\n// subscribe app to any state changes in redux store:\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants.js';\n\nexport const setSearchField = (text) => {\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\n// since function is being returned, not an object, use redux-thunk middleware:\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default: \n            return state;\n    }\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false});\n        default: \n        return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport {searchRobots, requestRobots} from './reducers';\nimport 'tachyons';\n\n// use middleware between action and reducer:\nconst logger = createLogger();\nconst robotReducer = combineReducers({ searchRobots, requestRobots });\nconst store = \n    createStore(robotReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}